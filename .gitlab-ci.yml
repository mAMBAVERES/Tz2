stages:
  - build
  - test
  - sign
  - deploy
  - upload

.docker_job:
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  DOTNET_IMAGE: "mcr.microsoft.com/dotnet/sdk:8.0"

build_linux_x64:
  stage: build
  image: $DOTNET_IMAGE
  script:
    - dotnet restore SimpleApp/SimpleApp.csproj
    - dotnet publish SimpleApp/SimpleApp.csproj -c Release -r linux-x64 --self-contained -o publish/linux-x64
  artifacts:
    paths:
      - publish/linux-x64/
    expire_in: 1 day
  rules:
    - if: '$REPOSITORY_NAME == "dotnet-app"'

build_windows_x64:
  stage: build
  image: $DOTNET_IMAGE
  script:
    - dotnet restore SimpleApp/SimpleApp.csproj
    - dotnet publish SimpleApp/SimpleApp.csproj -c Release -r win-x64 --self-contained -o publish/win-x64
  artifacts:
    paths:
      - publish/win-x64/
    expire_in: 1 day
  rules:
    - if: '$REPOSITORY_NAME == "dotnet-app"'

build_windows_x86:
  stage: build
  image: $DOTNET_IMAGE
  script:
    - dotnet restore SimpleApp/SimpleApp.csproj
    - dotnet publish SimpleApp/SimpleApp.csproj -c Release -r win-x86 --self-contained -o publish/win-x86
  artifacts:
    paths:
      - publish/win-x86/
    expire_in: 1 day
  rules:
    - if: '$REPOSITORY_NAME == "dotnet-app"'

test_dotnet:
  stage: test
  image: $DOTNET_IMAGE
  needs:
    - job: "build_linux_x64"
      artifacts: true
    - job: "build_windows_x64"
      artifacts: true
    - job: "build_windows_x86"
      artifacts: true
  script:
    - dotnet test SimpleApp.Tests/SimpleApp.Tests.csproj --configuration Release --logger trx --results-directory SimpleApp.Tests/TestResults
  artifacts:
    when: always
    paths:
      - SimpleApp.Tests/TestResults/
    reports:
      junit: SimpleApp.Tests/TestResults/*.trx
    expire_in: 1 week
  rules:
    - if: '$REPOSITORY_NAME == "dotnet-app"'


# Подпись приложений
sign_applications:
  stage: sign
  needs:
    - job: "build_windows_x64"
      artifacts: true
    - job: "build_windows_x86"
      artifacts: true
    - job: "test_dotnet"
  script:
    - echo "Подпись приложений"
    - find publish/win-x64 -name "*.exe" -exec echo "Подписываем {}" \;
    - find publish/win-x86 -name "*.exe" -exec echo "Подписываем {}" \;
  artifacts:
    paths:
      - publish/
    expire_in: 1 month
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
    - if: '$REPOSITORY_NAME == "dotnet-app" && $CI_COMMIT_TAG'

# Деплой в staging
deploy_staging:
  stage: deploy
  needs:
    - job: "build_linux_x64"
      artifacts: true
    - job: "test_dotnet"
  environment:
    name: staging
  script:
    - echo "Деплой в staging"
    - mkdir -p deploy && cp -r publish/linux-x64/* deploy/
  artifacts:
    paths:
      - deploy/
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_REF_NAME == "develop"'

# Деплой в production
deploy_production:
  extends: .docker_job
  stage: deploy
  needs:
    - job: "sign_applications"
      artifacts: true
  environment:
    name: production
  script:
    - echo "Деплой в production"
    - mkdir -p deploy-prod && cp -r publish/* deploy-prod/
  artifacts:
    paths:
      - deploy-prod/
    expire_in: 1 month
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
      when: manual

upload_artifacts:
  stage: upload
  image: alpine:latest
  needs:
    - job: "build_linux_x64"
      artifacts: true
    - job: "build_windows_x64"
      artifacts: true
    - job: "build_windows_x86"
      artifacts: true
  script:
    - apk add --no-cache zip tar
    - mkdir -p upload
    - tar -czf upload/linux-x64.tar.gz -C publish linux-x64/
    - zip -r upload/win-x64.zip publish/win-x64/
    - zip -r upload/win-x86.zip publish/win-x86/
    - echo "Артефакты готовы в папке upload/"
    - ls -la upload/
  artifacts:
    paths:
      - upload/
    expire_in: 1 month

